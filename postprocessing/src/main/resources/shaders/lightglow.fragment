
#version 120
// Light scattering implementation by Toni Sagrista

#ifdef GL_ES
precision mediump float;
precision mediump int;
#endif

uniform sampler2D u_texture0;
// Glow texture
uniform sampler2D u_texture1;
uniform vec2 u_viewport;

varying vec2 v_texCoords;

uniform vec2 u_lightPositions[10];
uniform float u_lightViewAngles[10];

uniform int u_nLights;

#define n_samples 20

float len(vec2 vect, float ar){
	return sqrt(vect.x * vect.x * ar * ar + vect.y * vect.y);
}

// Computes luminance of rgba color
float lum(vec4 color){
	return (0.299 * color.r + 0.587 * color.g + 0.114 * color.b) * color.a;
}

float fx(float t){
	return t * cos(t);
}

float fy(float t){
	return t * sin(t);
}

void main()
{
	 float exposure = 0.4;
	 float ar = u_viewport.x / u_viewport.y;
	 gl_FragColor = vec4(0.0);

	 for (int clpos = 0; clpos < u_nLights; clpos++){
	 	 float viewAngle = u_lightViewAngles[clpos];
		 
		 float lum = 0.0;
		 for(int idx = 0; idx < n_samples; idx++){
		 	lum += (texture2D(u_texture0, u_lightPositions[clpos] + vec2(fx(idx * 0.0015), fy(idx * 0.0015)))).r;
		 }
		 lum /= n_samples;

		 float size = 1.6 * lum;
		 
		 vec2 glow_tc = (v_texCoords - u_lightPositions[clpos]);
		 glow_tc.x *= ar;
		 glow_tc /= size;
		 
		 glow_tc += 0.5;
		 
		 vec4 color_glow = texture2D(u_texture1, glow_tc);
		
		 
		 gl_FragColor = color_glow + viewAngle * 0.0000001;
	 }
}
